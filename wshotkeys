#!/usr/bin/python3
import asyncio
import click
import json
import keyboard
import os
import platform
import websockets


LOOP = asyncio.get_event_loop()


class Client(object):
    def __init__(self, hotkey_data, websocket):
        hotkeys = json.loads(hotkey_data)
        self.hotkeys = {hotkey['keys']: hotkey['message'] for hotkey in hotkeys}
        self.peer = websocket
        self._attached = False

    def notify(self, msg):
        if self.peer.open:
            yield from self.peer.send(msg)

    def detatch(self):
        if not self._attached:
            return

        for hk in self.hotkeys.keys():
            keyboard.remove_hotkey(hk)

        self._attached = False

    def attach(self):
        if self._attached:
            return

        def notification(msg):
            LOOP.call_soon_threadsafe(asyncio.async, self.notify(msg))

        for hk, message in self.hotkeys.items():
            keyboard.add_hotkey(hk, notification, (message,))

        self._attached = True


@asyncio.coroutine
def server(websocket, path):
    print('Client connected')
    hotkey_data = yield from websocket.recv()
    try:
        client = Client(hotkey_data, websocket)
    except Exception:
        print('Failed to parse hotkey data:', hotkey_data)
        websocket.close()
        return

    client.attach()
    while True:
        if not websocket.open:
            client.detatch()
            print('Client disconnected')
            return
        yield from asyncio.sleep(5)


@click.command()
@click.option('--addr', '-a', default='127.0.0.1', help='Run WebSocket server on this address.')
@click.option('--port', '-p', default=46724, type=int, help='Run WebSocket server on this port.')
def main(addr, port):
    """WebSocket hot-key server."""
    if platform.system() == 'Linux' and os.getuid() != 0:
        print('Must be run as root.')
        exit(1)

    start_server = websockets.serve(server, addr, port)
    print('Running server at', (addr, port))
    try:
        LOOP.run_until_complete(start_server)
        LOOP.run_forever()
    except KeyboardInterrupt:
        print('Stopping server...')
        exit(0)


if __name__ == '__main__':
    main()
